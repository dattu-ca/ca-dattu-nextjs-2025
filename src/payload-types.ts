/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    metadata: Metadatum;
    siteMetadata: SiteMetadatum;
    page: Page;
    post: Post;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    metadata: MetadataSelect<false> | MetadataSelect<true>;
    siteMetadata: SiteMetadataSelect<false> | SiteMetadataSelect<true>;
    page: PageSelect<false> | PageSelect<true>;
    post: PostSelect<false> | PostSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "metadata".
 */
export interface Metadatum {
  id: string;
  slug: string;
  /**
   * The SEO title of the page, used in search engine results and the browser tab.
   */
  metaTitle: string;
  /**
   * The SEO meta description shown in search engine results below the title.
   */
  metaDescription?: string | null;
  /**
   * The canonical URL for the page to avoid duplicate content issues.
   */
  canonicalURL?: string | null;
  /**
   * SEO keywords (optional, usually ignored by modern search engines).
   */
  keywords?: string | null;
  /**
   * Prevent search engines from indexing the page (useful for private pages).
   */
  noindex?: boolean | null;
  socialMedia?: {
    og?: {
      /**
       * Title for Open Graph metadata when shared on social platforms like Facebook or LinkedIn. Defaults to `metaTitle`.
       */
      ogTitle?: string | null;
      /**
       * Description for Open Graph metadata when shared on social media. Defaults to `metaDescription`.
       */
      ogDescription?: string | null;
      /**
       * The preview image used for Open Graph sharing (can be different from `metaDescription`).
       */
      ogImage?: (string | null) | Media;
      /**
       * The type of content for Open Graph (e.g., `article`, `video`, `website`).
       */
      ogType?: ('website' | 'article') | null;
      /**
       * Override the Open Graph URL (optional, defaults to the current page's URL).
       */
      ogURL?: string | null;
    };
    twitter?: {
      /**
       * Twitter card type (`summary` or `summary_large_image`).
       */
      twitterCardType?: ('summary' | 'summary_large_image') | null;
      /**
       * The title for the Twitter Card when shared on Twitter. Defaults to `metaTitle`.
       */
      twitterTitle?: string | null;
      /**
       * The description for the Twitter Card when shared on Twitter. Defaults to `metaDescription`.
       */
      twitterDescription?: string | null;
      /**
       * The image used for the Twitter Card. This can be different from the `ogImage`.
       */
      twitterImage?: (string | null) | Media;
      /**
       * Twitter handle of the content creator (e.g., `@username`).
       */
      twitterCreator?: string | null;
    };
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "siteMetadata".
 */
export interface SiteMetadatum {
  id: string;
  defaultTitleTempalte: string;
  /**
   * The favorite icon
   */
  favicon?: (string | null) | Media;
  metadata: {
    /**
     * The SEO title of the page, used in search engine results and the browser tab.
     */
    metaTitle: string;
    /**
     * The SEO meta description shown in search engine results below the title.
     */
    metaDescription?: string | null;
    /**
     * The canonical URL for the page to avoid duplicate content issues.
     */
    canonicalURL?: string | null;
    /**
     * SEO keywords (optional, usually ignored by modern search engines).
     */
    keywords?: string | null;
    /**
     * Prevent search engines from indexing the page (useful for private pages).
     */
    noindex?: boolean | null;
    socialMedia?: {
      og?: {
        /**
         * Title for Open Graph metadata when shared on social platforms like Facebook or LinkedIn. Defaults to `metaTitle`.
         */
        ogTitle?: string | null;
        /**
         * Description for Open Graph metadata when shared on social media. Defaults to `metaDescription`.
         */
        ogDescription?: string | null;
        /**
         * The preview image used for Open Graph sharing (can be different from `metaDescription`).
         */
        ogImage?: (string | null) | Media;
        /**
         * The type of content for Open Graph (e.g., `article`, `video`, `website`).
         */
        ogType?: ('website' | 'article') | null;
        /**
         * Override the Open Graph URL (optional, defaults to the current page's URL).
         */
        ogURL?: string | null;
      };
      twitter?: {
        /**
         * Twitter card type (`summary` or `summary_large_image`).
         */
        twitterCardType?: ('summary' | 'summary_large_image') | null;
        /**
         * The title for the Twitter Card when shared on Twitter. Defaults to `metaTitle`.
         */
        twitterTitle?: string | null;
        /**
         * The description for the Twitter Card when shared on Twitter. Defaults to `metaDescription`.
         */
        twitterDescription?: string | null;
        /**
         * The image used for the Twitter Card. This can be different from the `ogImage`.
         */
        twitterImage?: (string | null) | Media;
        /**
         * Twitter handle of the content creator (e.g., `@username`).
         */
        twitterCreator?: string | null;
      };
    };
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "page".
 */
export interface Page {
  id: string;
  entryText: string;
  slug: string;
  heading: string;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  isPublished: boolean;
  publishedAt?: string | null;
  metadata: {
    /**
     * The SEO title of the page, used in search engine results and the browser tab.
     */
    metaTitle: string;
    /**
     * The SEO meta description shown in search engine results below the title.
     */
    metaDescription?: string | null;
    /**
     * The canonical URL for the page to avoid duplicate content issues.
     */
    canonicalURL?: string | null;
    /**
     * SEO keywords (optional, usually ignored by modern search engines).
     */
    keywords?: string | null;
    /**
     * Prevent search engines from indexing the page (useful for private pages).
     */
    noindex?: boolean | null;
    socialMedia?: {
      og?: {
        /**
         * Title for Open Graph metadata when shared on social platforms like Facebook or LinkedIn. Defaults to `metaTitle`.
         */
        ogTitle?: string | null;
        /**
         * Description for Open Graph metadata when shared on social media. Defaults to `metaDescription`.
         */
        ogDescription?: string | null;
        /**
         * The preview image used for Open Graph sharing (can be different from `metaDescription`).
         */
        ogImage?: (string | null) | Media;
        /**
         * The type of content for Open Graph (e.g., `article`, `video`, `website`).
         */
        ogType?: ('website' | 'article') | null;
        /**
         * Override the Open Graph URL (optional, defaults to the current page's URL).
         */
        ogURL?: string | null;
      };
      twitter?: {
        /**
         * Twitter card type (`summary` or `summary_large_image`).
         */
        twitterCardType?: ('summary' | 'summary_large_image') | null;
        /**
         * The title for the Twitter Card when shared on Twitter. Defaults to `metaTitle`.
         */
        twitterTitle?: string | null;
        /**
         * The description for the Twitter Card when shared on Twitter. Defaults to `metaDescription`.
         */
        twitterDescription?: string | null;
        /**
         * The image used for the Twitter Card. This can be different from the `ogImage`.
         */
        twitterImage?: (string | null) | Media;
        /**
         * Twitter handle of the content creator (e.g., `@username`).
         */
        twitterCreator?: string | null;
      };
    };
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "post".
 */
export interface Post {
  id: string;
  entryText: string;
  slug: string;
  heading: string;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  isPublished: boolean;
  publishedAt?: string | null;
  metadata: {
    /**
     * The SEO title of the page, used in search engine results and the browser tab.
     */
    metaTitle: string;
    /**
     * The SEO meta description shown in search engine results below the title.
     */
    metaDescription?: string | null;
    /**
     * The canonical URL for the page to avoid duplicate content issues.
     */
    canonicalURL?: string | null;
    /**
     * SEO keywords (optional, usually ignored by modern search engines).
     */
    keywords?: string | null;
    /**
     * Prevent search engines from indexing the page (useful for private pages).
     */
    noindex?: boolean | null;
    socialMedia?: {
      og?: {
        /**
         * Title for Open Graph metadata when shared on social platforms like Facebook or LinkedIn. Defaults to `metaTitle`.
         */
        ogTitle?: string | null;
        /**
         * Description for Open Graph metadata when shared on social media. Defaults to `metaDescription`.
         */
        ogDescription?: string | null;
        /**
         * The preview image used for Open Graph sharing (can be different from `metaDescription`).
         */
        ogImage?: (string | null) | Media;
        /**
         * The type of content for Open Graph (e.g., `article`, `video`, `website`).
         */
        ogType?: ('website' | 'article') | null;
        /**
         * Override the Open Graph URL (optional, defaults to the current page's URL).
         */
        ogURL?: string | null;
      };
      twitter?: {
        /**
         * Twitter card type (`summary` or `summary_large_image`).
         */
        twitterCardType?: ('summary' | 'summary_large_image') | null;
        /**
         * The title for the Twitter Card when shared on Twitter. Defaults to `metaTitle`.
         */
        twitterTitle?: string | null;
        /**
         * The description for the Twitter Card when shared on Twitter. Defaults to `metaDescription`.
         */
        twitterDescription?: string | null;
        /**
         * The image used for the Twitter Card. This can be different from the `ogImage`.
         */
        twitterImage?: (string | null) | Media;
        /**
         * Twitter handle of the content creator (e.g., `@username`).
         */
        twitterCreator?: string | null;
      };
    };
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'metadata';
        value: string | Metadatum;
      } | null)
    | ({
        relationTo: 'siteMetadata';
        value: string | SiteMetadatum;
      } | null)
    | ({
        relationTo: 'page';
        value: string | Page;
      } | null)
    | ({
        relationTo: 'post';
        value: string | Post;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "metadata_select".
 */
export interface MetadataSelect<T extends boolean = true> {
  slug?: T;
  metaTitle?: T;
  metaDescription?: T;
  canonicalURL?: T;
  keywords?: T;
  noindex?: T;
  socialMedia?:
    | T
    | {
        og?:
          | T
          | {
              ogTitle?: T;
              ogDescription?: T;
              ogImage?: T;
              ogType?: T;
              ogURL?: T;
            };
        twitter?:
          | T
          | {
              twitterCardType?: T;
              twitterTitle?: T;
              twitterDescription?: T;
              twitterImage?: T;
              twitterCreator?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "siteMetadata_select".
 */
export interface SiteMetadataSelect<T extends boolean = true> {
  defaultTitleTempalte?: T;
  favicon?: T;
  metadata?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        canonicalURL?: T;
        keywords?: T;
        noindex?: T;
        socialMedia?:
          | T
          | {
              og?:
                | T
                | {
                    ogTitle?: T;
                    ogDescription?: T;
                    ogImage?: T;
                    ogType?: T;
                    ogURL?: T;
                  };
              twitter?:
                | T
                | {
                    twitterCardType?: T;
                    twitterTitle?: T;
                    twitterDescription?: T;
                    twitterImage?: T;
                    twitterCreator?: T;
                  };
            };
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "page_select".
 */
export interface PageSelect<T extends boolean = true> {
  entryText?: T;
  slug?: T;
  heading?: T;
  content?: T;
  isPublished?: T;
  publishedAt?: T;
  metadata?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        canonicalURL?: T;
        keywords?: T;
        noindex?: T;
        socialMedia?:
          | T
          | {
              og?:
                | T
                | {
                    ogTitle?: T;
                    ogDescription?: T;
                    ogImage?: T;
                    ogType?: T;
                    ogURL?: T;
                  };
              twitter?:
                | T
                | {
                    twitterCardType?: T;
                    twitterTitle?: T;
                    twitterDescription?: T;
                    twitterImage?: T;
                    twitterCreator?: T;
                  };
            };
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "post_select".
 */
export interface PostSelect<T extends boolean = true> {
  entryText?: T;
  slug?: T;
  heading?: T;
  content?: T;
  isPublished?: T;
  publishedAt?: T;
  metadata?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        canonicalURL?: T;
        keywords?: T;
        noindex?: T;
        socialMedia?:
          | T
          | {
              og?:
                | T
                | {
                    ogTitle?: T;
                    ogDescription?: T;
                    ogImage?: T;
                    ogType?: T;
                    ogURL?: T;
                  };
              twitter?:
                | T
                | {
                    twitterCardType?: T;
                    twitterTitle?: T;
                    twitterDescription?: T;
                    twitterImage?: T;
                    twitterCreator?: T;
                  };
            };
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}